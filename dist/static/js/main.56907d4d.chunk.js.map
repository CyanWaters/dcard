{"version":3,"sources":["Component/InfiniteScroll/InfiniteScroll.jsx","lib/api.js","lib/common.js","Component/App/App.jsx","reportWebVitals.js","index.jsx"],"names":["InfiniteScroll","props","loadMore","component","loading","handleScroll","scrollTop","document","documentElement","body","scrollHeight","clientHeight","window","innerHeight","Math","ceil","useEffect","addEventListener","removeEventListener","className","LoadingOutlined","SERACH_URL","searchRepoFromGitHub","repoName","count","page","a","URL","axios","get","data","totalCount","repos","total_count","items","errorMessage","message","error","debounce","callback","time","timer","clearTimeout","setTimeout","IconFont","createFromIconfontCN","scriptUrl","App","useState","setRepoName","setCount","setPage","setLoading","dataSource","setDataSource","setErrorMessage","Header","Layout","Content","Footer","Sider","disalbeButton","onChangeRepoName","useCallback","e","target","value","onChangeCount","onChangePage","getRepo","cleanDataSource","err","map","item","index","key","name","url","updated_at","concat","tableComponenet","columns","title","dataIndex","pagination","href","GithubOutlined","type","data-testid","placeholder","onChange","min","defaultValue","disabled","length","FileOutlined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.56907d4d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { LoadingOutlined } from \"@ant-design/icons\";\r\n\r\nexport const InfiniteScroll = (props) => {\r\n  const { loadMore, component, loading } = props;\r\n  // const [request, setRequest] = useState(false);\r\n\r\n  const handleScroll = () => {\r\n    const scrollTop =\r\n      document?.documentElement.scrollTop || document.body.scrollTop;\r\n    const scrollHeight =\r\n      document?.documentElement.scrollHeight || document.body.scrollHeight;\r\n    const clientHeight =\r\n      document?.documentElement.clientHeight || window.innerHeight;\r\n    const scrolledToBottom =\r\n      Math.ceil(scrollTop + clientHeight) >= scrollHeight;\r\n    if (scrolledToBottom && !loading) {\r\n      // prevent to load multiple times in short period\r\n      // setRequest(true);\r\n      loadMore();\r\n      // setRequest(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // mount\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n    // unmount\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", handleScroll);\r\n    };\r\n  }, []);\r\n  return (\r\n    <>\r\n      {component}{\" \"}\r\n      {(() => {\r\n        if (true) {\r\n          return (\r\n            <div className=\"data-loading\">\r\n              <LoadingOutlined />\r\n            </div>\r\n          );\r\n        }\r\n      })()}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InfiniteScroll;\r\n","import axios from \"axios\";\r\n\r\nexport const GITHUB_URL = \"https://api.github.com\";\r\nexport const SERACH_URL = `${GITHUB_URL}/search/repositories`;\r\n\r\nexport const searchRepoFromGitHub = async (repoName, count, page) => {\r\n  const URL = `${SERACH_URL}?q=${repoName}&per_page=${count}&page=${page}`;\r\n  try {\r\n    const { data: repos = {} } = await axios.get(URL);\r\n    const totalCount = repos?.total_count || 0;\r\n    const items = repos?.items || [];\r\n    return { items, totalCount };\r\n  } catch (e) {\r\n    return { errorMessage: e?.message || e, error: true };\r\n  }\r\n};\r\n","export const debounce = (callback, time) => {\r\n  let timer = null;\r\n  return function () {\r\n    if (timer) {\r\n      clearTimeout(timer);\r\n    }\r\n    timer = setTimeout(callback, time);\r\n  };\r\n};\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Input, Layout, Table } from \"antd\";\r\nimport {\r\n  createFromIconfontCN,\r\n  LoadingOutlined,\r\n  GithubOutlined,\r\n  FileOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nimport { InfiniteScroll } from \"../InfiniteScroll\";\r\nimport { searchRepoFromGitHub, debounce } from \"../../lib\";\r\n\r\nimport \"./styles/index.css\";\r\n\r\nconst DEFAULT_COUNT = 30;\r\nconst DEFAULT_PAGE = 1;\r\nconst DELAY_INPUT_TIME = 600;\r\nconst GITHUB_URL = \"https://github.com/CyanWaters\";\r\n\r\nconst IconFont = createFromIconfontCN({\r\n  scriptUrl: \"//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js\",\r\n});\r\n\r\nexport const App = () => {\r\n  const [repoName, setRepoName] = useState(\"\");\r\n  const [count, setCount] = useState(DEFAULT_COUNT);\r\n  const [page, setPage] = useState(DEFAULT_PAGE);\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataSource, setDataSource] = useState([]);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const { Header, Footer, Sider, Content } = Layout;\r\n\r\n  const disalbeButton = !(repoName && page && count);\r\n  // Table Columns\r\n  const columns = [\r\n    {\r\n      title: \"Name\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n    },\r\n    {\r\n      title: \"URL\",\r\n      dataIndex: \"url\",\r\n      key: \"url\",\r\n    },\r\n    {\r\n      title: \"Latest Updated Time\",\r\n      dataIndex: \"updated_at\",\r\n      key: \"updated_at\",\r\n    },\r\n  ];\r\n\r\n  const onChangeRepoName = useCallback((e) => {\r\n    debounce(() => setRepoName(e?.target?.value), DELAY_INPUT_TIME)();\r\n  }, []);\r\n  const onChangeCount = useCallback((e) => {\r\n    debounce(() => setCount(e?.target?.value), DELAY_INPUT_TIME)();\r\n  }, []);\r\n  const onChangePage = useCallback((e) => {\r\n    debounce(() => setPage(e?.target?.value), DELAY_INPUT_TIME)();\r\n  }, []);\r\n\r\n  const getRepo = async (cleanDataSource = false) => {\r\n    setLoading(true);\r\n    const {\r\n      items,\r\n      totalCount,\r\n      error = false,\r\n      errorMessage: err = \"\",\r\n    } = await searchRepoFromGitHub(repoName, count, page);\r\n    if (error) {\r\n      setErrorMessage(err);\r\n    } else {\r\n      const data = items.map((item, index) => {\r\n        const obj = {\r\n          key: index,\r\n          name: item?.name,\r\n          url: item?.url,\r\n          updated_at: item?.updated_at,\r\n        };\r\n        return obj;\r\n      });\r\n      setDataSource(cleanDataSource ? data : dataSource.concat(data));\r\n      setErrorMessage(\"\");\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const loadMore = useCallback(() => {\r\n    setPage(page + 1);\r\n  }, [page]);\r\n  const tableComponenet = (\r\n    <Table\r\n      className=\"repo-table\"\r\n      dataSource={dataSource}\r\n      columns={columns}\r\n      pagination={false}\r\n    />\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!disalbeButton) {\r\n      // detect repoName is the same or not\r\n      getRepo(true);\r\n    }\r\n  }, [repoName]);\r\n  useEffect(() => {\r\n    if (!disalbeButton) {\r\n      getRepo();\r\n    }\r\n  }, [page, count]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"app\">\r\n        <Layout>\r\n          <Header className=\"header\">\r\n            <a className=\"link\" href={GITHUB_URL} target=\"popup\">\r\n              <GithubOutlined /> GitHub\r\n            </a>\r\n            <div className=\"float-right link\">\r\n              <IconFont type=\"icon-tuichu\" />\r\n            </div>\r\n            <div className=\"clear-float\" />\r\n          </Header>\r\n          <Content>\r\n            <div>\r\n              <p className=\"field-name\">Repoitory Name:</p>\r\n              <Input\r\n                data-testid=\"repoName\"\r\n                placeholder=\"Repo Name\"\r\n                onChange={onChangeRepoName}\r\n              />\r\n            </div>\r\n            <div>\r\n              <p className=\"field-name\"> Per Page Count:</p>\r\n              <Input\r\n                data-testid=\"per-page-count\"\r\n                type=\"number\"\r\n                placeholder=\"Count\"\r\n                min={1}\r\n                onChange={onChangeCount}\r\n                defaultValue={count}\r\n              />\r\n            </div>\r\n            <div>\r\n              <p className=\"field-name\"> Page:</p>\r\n              <Input\r\n                type=\"number\"\r\n                placeholder=\"Page\"\r\n                min={1}\r\n                onChange={onChangePage}\r\n                value={page}\r\n                disabled\r\n              />\r\n            </div>\r\n            {/* Search Button */}\r\n            {/* <div className=\"button-align-center\">\r\n            <Button type=\"primary\" disabled={disalbeButton} onClick={getRepo}>\r\n              Search\r\n            </Button>\r\n          </div> */}\r\n            {errorMessage ? (\r\n              <div className=\"field-name no-data\">\r\n                {`Something went wrong: ${errorMessage}`}\r\n              </div>\r\n            ) : disalbeButton || !dataSource.length ? (\r\n              loading ? (\r\n                <div className=\"data-loading\">\r\n                  <LoadingOutlined />\r\n                </div>\r\n              ) : (\r\n                <div className=\"field-name no-data\">\r\n                  <FileOutlined />\r\n                  No Data\r\n                </div>\r\n              )\r\n            ) : (\r\n              <InfiniteScroll\r\n                key={`${count}+${page}+${loading}`}\r\n                loadMore={loadMore}\r\n                component={tableComponenet}\r\n                loading={loading}\r\n              />\r\n            )}\r\n          </Content>\r\n          {/* <Footer>Footer</Footer> */}\r\n        </Layout>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./Component/App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}